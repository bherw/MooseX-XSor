package MooseX::XSor::XS::Meta::Instance::XSInlinable;

use Moose::Role;

sub is_xs_inlinable  {1}
sub xs_get_is_lvalue {0}

sub xs_boot            { wantarray ? () : '' }
sub xs_headers         { wantarray ? () : '' }
sub xs_initialize_slot { wantarray ? () : '' }

requires qw(xs_create_instance xs_deinitialize_slot xs_get_slot_value
	xs_is_slot_initialized xs_get_slot_value);

sub xs_rebless_instance_structure {
	my ($self, $instance, $class) = @_;
	"sv_bless(sv_mortalcopy($instance), gv_stashsv($class, GV_ADD))";
}

sub xs_strengthen_slot_value {
	my ($self, $instance_slots, $slot_name) = @_;
	my $access = $self->xs_get_slot_value($instance_slots, $slot_name);
	my $set = $self->xs_set_slot_value($instance_slots, $slot_name, 'slot');
	"if (SV* slot = $access) { $set; }";
}

sub xs_weaken_slot_value {
	my ($self, $instance_slots, $slot_name) = @_;
	my $access = $self->xs_get_slot_value($instance_slots, $slot_name);
	"if (SV* slot = $access) { sv_rvweaken(slot); }";
}

1;

=head1 DESCRIPTION

L<MooseX::XSor::XS::Meta::Instance::XSInlinable> is a role for roles that
implement metainstances that can be inlined as XS. It is not meant to be
applied to metainstances directly.

=head1 METHODS

The following methods are implemented by this role and may be overridden in
implementations.

=head2 C<is_xs_inlinable>

This is a boolean that indicates whether or not slot access operations can be
inlined to XS. By default it is true, but subclasses can override this.

=head2 C<xs_boot>

	my @code = $mi->xs_boot;

Generates statements that must be included in the XS boot if using XS code
generated by this instance.

=head2 C<xs_get_is_lvalue>

	my $bool = $mi->xs_get_is_lvalue;

This is a boolean that indicates whether the expression returned by
C<xs_get_slot_value> is a valid lvalue. This can be used to do extra
optimizations when generating inlined methods.

Note that none of the core L<MooseX::XSor> metainstances support this.

=head2 C<xs_headers>

	my @code = $mi->xs_headers;

Generates statements which must be included before XS code generated by this
instance.

=head2 C<xs_initialize_slot>

	my @code = $mi->xs_initialize_slot;

Generates statements.

This was added mirroring L<Class::MOP::Instance>'s perl inlining methods, but
it doesn't seem to have a use since any initialization can be done by
C<xs_create_instance>. The XSor metaclass includes it during slot
initialization in case it does become useful.

=head2 C<xs_rebless_instance_structure>

	SV* newinstance = $mi->xs_rebless_instance_structure($instance, $class);

Generates an expression which returns a mortal copy of an instance blessed into
another class.

=head2 C<xs_strengthen_slot_value>

	my @code = $mi->xs_strengthen_slot_value($instance_slots, $slot_name);

Generates statements which strengthen the value in a slot if it is initialized.

=head2 C<xs_weaken_slot_value>

	my @code = $mi->xs_weaken_slot_value($instance_slots, $slot_name);

Generates statements which weaken the value in a slot if it is initialized.

=head1 REQUIRED METHODS

The following methods must be implemented by metainstances that consume this
role.

=head2 C<xs_create_instance>

	my @code = $mi->xs_create_instance($instance, $instance_slots, $class);

Returns statements that create a mortal instance SV* named $instance and the
slots it contains, named $instance_slots, blessed into $class.
class must be the name of an SV*, not a class name literal.

=head2 C<xs_deinitialize_slot>

	SV* val = @{[ $mi->xs_deinitialize_slot($instance_slots, $slot_name) ]};
	my $flags = G_DISCARD;
	@{[ $mi->xs_deinitialize_slot($instance_slots, $slot_name, $flags) ]};

Generates an expression that deinitializes a slot. The value's SV is mortalized
and returned unless the slot is empty or L<MooseX::XSor::Util/G_DISCARD> is set,
in which case NULL will be returned.

=head2 C<xs_get_slot_value>

	SV* val = @{[ $mi->xs_get_slot_value($instance_slots, $slot_name) ]};

Generates an expression that returns a slot value, or NULL if the slot has not
been initialized.

=head2 C<xs_is_slot_initialized>

	bool exists = @{[ $mi->xs_is_slot_initialized($instance_slots, $slot_name) ]}

Generates an expression that returns a boolean indicating whether the slot has
been initialized. Note that if you intend to use the slot value, it's faster to
use C<xs_get_slot_value> and check if it's NULL, unlike perl inlining.

=head2 C<xs_set_slot_value>

	SV* val = @{[ $mi->xs_set_slot_value($instance_slots, $slot_name, $value) ]};

Generates an expression that stores a value in the instance's slots. The value
is returned afterwards.

Note that the caller is responsible for suitably incrementing the reference
count of C<value> before the call. Effectively, the slot takes ownership of one
reference to C<value>.

=head1 SEE ALSO

L<Class::MOP::Instance>

=cut
